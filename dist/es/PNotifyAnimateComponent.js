/* src/PNotifyAnimateComponent.html generated by Svelte v3.18.1 */
import { SvelteComponent, init, safe_not_equal } from "svelte/internal";

const key = "Animate";

const defaults = {
	// Use animate.css to animate the notice.
	animate: false,
	// The class to use to animate the notice in.
	inClass: "",
	// The class to use to animate the notice out.
	outClass: ""
};

function instance($$self, $$props, $$invalidate) {
	let { _notice = null } = $$props;
	let { animate = defaults.animate } = $$props;
	let { inClass = defaults.inClass } = $$props;
	let { outClass = defaults.outClass } = $$props;
	let _animateIn;
	let _animateOut;
	let _animation;

	function animateIn(callback) {
		// Declare that the notice is animating in.
		_notice.setAnimating("in");

		let off;

		const finished = event => {
			if (event && _notice.refs.elem && event.target !== _notice.refs.elem) {
				return;
			}

			off();
			_notice.setAnimatingClass("ui-pnotify-in animated");

			if (callback) {
				callback.call();
			}

			// Declare that the notice has completed animating.
			_notice.setAnimating(false);
		};

		off = _notice.on("animationend", finished);
		_notice.setAnimatingClass("ui-pnotify-in animated " + inClass);
	}

	function animateOut(callback) {
		// Declare that the notice is animating out.
		_notice.setAnimating("out");

		let off;

		const finished = event => {
			if (event && _notice.refs.elem && event.target !== _notice.refs.elem) {
				return;
			}

			off();
			_notice.setAnimatingClass("animated");

			if (callback) {
				callback.call();
			}

			// Declare that the notice has completed animating.
			if (_notice.setAnimating) {
				_notice.setAnimating(false);
			}
		};

		off = _notice.on("animationend", finished);
		_notice.setAnimatingClass("ui-pnotify-in animated " + outClass);
	}

	const attention = (aniClass, callback) => {
		let off;

		const cb = () => {
			off();
			_notice.removeModuleClass("container", "animated", aniClass);

			if (callback) {
				callback.call(_notice);
			}
		};

		off = _notice.on("animationend", cb);
		_notice.addModuleClass("container", "animated", aniClass);
	};

	$$self.$set = $$props => {
		if ("_notice" in $$props) $$invalidate(0, _notice = $$props._notice);
		if ("animate" in $$props) $$invalidate(1, animate = $$props.animate);
		if ("inClass" in $$props) $$invalidate(2, inClass = $$props.inClass);
		if ("outClass" in $$props) $$invalidate(3, outClass = $$props.outClass);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*animate, _notice, animSpeed*/ 259) {
			$: {
				if (animate && _notice.refs.elem) {
					var animSpeed = 250;

					if (_notice.animateSpeed === "slow") {
						$$invalidate(8, animSpeed = 400);
					} else if (_notice.animateSpeed === "fast") {
						$$invalidate(8, animSpeed = 100);
					} else if (_notice.animateSpeed > 0) {
						$$invalidate(8, animSpeed = _notice.animateSpeed);
					}

					$$invalidate(8, animSpeed = animSpeed / 1000);
					$$invalidate(0, _notice.refs.elem.style.animationDuration = animSpeed + "s", _notice);
				}
			}
		}

		if ($$self.$$.dirty & /*animate, _animateIn, _notice, _animation, _animateOut*/ 227) {
			$: {
				if (animate && !_animateIn) {
					$$invalidate(7, _animation = _notice.animation);
					$$invalidate(5, _animateIn = _notice.animateIn);
					$$invalidate(6, _animateOut = _notice.animateOut);
					_notice.$set({ animation: "none", animateIn, animateOut });
				} else if (!animate && _animateIn) {
					_notice.$set({
						animation: _animation,
						animateIn: _animateIn,
						animateOut: _animateOut
					});

					$$invalidate(7, _animation = null);
					$$invalidate(5, _animateIn = null);
					$$invalidate(6, _animateOut = null);
				}
			}
		}
	};

	return [_notice, animate, inClass, outClass, attention];
}

class PNotifyAnimateComponent extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, null, safe_not_equal, {
			_notice: 0,
			animate: 1,
			inClass: 2,
			outClass: 3,
			attention: 4
		});
	}

	get attention() {
		return this.$$.ctx[4];
	}
}

export default PNotifyAnimateComponent;
export { key, defaults };
//# sourceMappingURL=PNotifyAnimateComponent.js.map