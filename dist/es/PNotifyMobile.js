/* src/PNotifyMobile.svelte generated by Svelte v3.18.2 */
import {
	SvelteComponent,
	globals,
	init,
	listen,
	noop,
	safe_not_equal
} from "svelte/internal";

const { window: window_1 } = globals;
import { onMount, onDestroy } from "svelte";

function create_fragment(ctx) {
	let dispose;

	return {
		c: noop,
		m(target, anchor) {
			dispose = listen(window_1, "resize", /*resize_handler*/ ctx[11]);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			dispose();
		}
	};
}

const position = "PrependContainer";

const defaults = {
	// Let the user swipe the notice away.
	swipeDismiss: true
};

function instance($$self, $$props, $$invalidate) {
	let { self = null } = $$props;
	let { swipeDismiss = defaults.swipeDismiss } = $$props;
	let origXY = null;
	let diffXY = null;
	let noticeWidthHeight = null;
	let noticeOpacity = null;
	let csspos = "left";
	let direction = "X";
	let span = "Width";
	let windowInnerWidth = window.innerWidth;
	let offs = [];

	onMount(() => {
		offs = [
			self.on("touchstart", e => {
				if (!swipeDismiss) {
					return;
				}

				const stack = self.stack;

				if (stack) {
					switch (stack.dir1) {
						case "up":
						case "down":
							csspos = "left";
							direction = "X";
							span = "Width";
							break;
						case "left":
						case "right":
							csspos = "top";
							direction = "Y";
							span = "Height";
							break;
					}
				}

				origXY = e.touches[0]["screen" + direction];
				noticeWidthHeight = self.refs.elem["scroll" + span];
				noticeOpacity = window.getComputedStyle(self.refs.elem)["opacity"];
				$$invalidate(1, self.refs.container.style[csspos] = 0, self);
			}),
			self.on("touchmove", e => {
				if (!origXY || !swipeDismiss) {
					return;
				}

				const curXY = e.touches[0]["screen" + direction];
				diffXY = curXY - origXY;
				const opacity = (1 - Math.abs(diffXY) / noticeWidthHeight) * noticeOpacity;
				$$invalidate(1, self.refs.elem.style.opacity = opacity, self);
				$$invalidate(1, self.refs.container.style[csspos] = diffXY + "px", self);
			}),
			self.on("touchend", () => {
				if (!origXY || !swipeDismiss) {
					return;
				}

				self.refs.container.classList.add("pnotify-mobile-animate-left");

				if (Math.abs(diffXY) > 40) {
					const goLeft = diffXY < 0
					? noticeWidthHeight * -2
					: noticeWidthHeight * 2;

					$$invalidate(1, self.refs.elem.style.opacity = 0, self);
					$$invalidate(1, self.refs.container.style[csspos] = goLeft + "px", self);
					self.close();
				} else {
					self.refs.elem.style.removeProperty("opacity");
					self.refs.container.style.removeProperty(csspos);
				}

				origXY = null;
				diffXY = null;
				noticeWidthHeight = null;
				noticeOpacity = null;
			}),
			self.on("touchcancel", () => {
				if (!origXY || !swipeDismiss) {
					return;
				}

				self.refs.elem.style.removeProperty("opacity");
				self.refs.container.style.removeProperty(csspos);
				origXY = null;
				diffXY = null;
				noticeWidthHeight = null;
				noticeOpacity = null;
			}),
			self.on("pnotify:afterClose", () => {
				// Remove any styling we added to close it.
				if (!swipeDismiss) {
					return;
				}

				self.refs.elem.style.removeProperty("opacity");
				self.refs.container.style.removeProperty("left");
				self.refs.container.style.removeProperty("top");
			})
		];
	});

	onDestroy(() => {
		offs.forEach(off => off());
	});

	const resize_handler = () => $$invalidate(0, windowInnerWidth = window.innerWidth);

	$$self.$set = $$props => {
		if ("self" in $$props) $$invalidate(1, self = $$props.self);
		if ("swipeDismiss" in $$props) $$invalidate(2, swipeDismiss = $$props.swipeDismiss);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*self, windowInnerWidth*/ 3) {
			$: {
				const stack = self.stack;

				if (stack) {
					if (windowInnerWidth <= 480) {
						if (!("_m_spacing1" in stack)) {
							stack._m_spacing1 = stack.spacing1;
							stack._m_firstpos1 = stack.firstpos1;
							stack._m_spacing2 = stack.spacing2;
							stack._m_firstpos2 = stack.firstpos2;
							stack.spacing1 = 0;
							stack.firstpos1 = 0;
							stack.spacing2 = 0;
							stack.firstpos2 = 0;
							stack.queuePosition();
						}
					} else {
						if ("_m_spacing1" in stack) {
							stack.spacing1 = stack._m_spacing1;
							delete stack._m_spacing1;
							stack.firstpos1 = stack._m_firstpos1;
							delete stack._m_firstpos1;
							stack.spacing2 = stack._m_spacing2;
							delete stack._m_spacing2;
							stack.firstpos2 = stack._m_firstpos2;
							delete stack._m_firstpos2;
							stack.queuePosition();
						}
					}
				}
			}
		}
	};

	return [
		windowInnerWidth,
		self,
		swipeDismiss,
		origXY,
		diffXY,
		noticeWidthHeight,
		noticeOpacity,
		csspos,
		direction,
		span,
		offs,
		resize_handler
	];
}

class PNotifyMobile extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { self: 1, swipeDismiss: 2 });
	}
}

export default PNotifyMobile;
export { position, defaults };
//# sourceMappingURL=PNotifyMobile.js.map