/* src/PNotifyReference.svelte generated by Svelte v3.18.2 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	null_to_empty,
	safe_not_equal,
	set_data,
	space,
	text
} from "svelte/internal";

import { onDestroy } from "svelte";

function create_fragment(ctx) {
	let button;
	let i;
	let i_class_value;
	let t0;
	let t1_value = /*labels*/ ctx[1].text + "";
	let t1;
	let button_class_value;
	let button_disabled_value;
	let t2;
	let div;
	let dispose;

	return {
		c() {
			button = element("button");
			i = element("i");
			t0 = text("Â ");
			t1 = text(t1_value);
			t2 = space();
			div = element("div");
			attr(i, "class", i_class_value = "" + (null_to_empty(/*self*/ ctx[0].getIcon("refresh")) + " svelte-1tn3i34"));
			attr(button, "class", button_class_value = "pnotify-action-button pnotify-reference-button " + /*self*/ ctx[0].getStyle("btn") + " " + /*self*/ ctx[0].getStyle("btn-secondary") + " svelte-1tn3i34");
			attr(button, "type", "button");
			button.disabled = button_disabled_value = !/*mouseIsIn*/ ctx[2];
			attr(div, "class", "pnotify-reference-clearing svelte-1tn3i34");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i);
			append(button, t0);
			append(button, t1);
			insert(target, t2, anchor);
			insert(target, div, anchor);
			dispose = listen(button, "click", /*doSomething*/ ctx[3]);
		},
		p(ctx, [dirty]) {
			if (dirty & /*self*/ 1 && i_class_value !== (i_class_value = "" + (null_to_empty(/*self*/ ctx[0].getIcon("refresh")) + " svelte-1tn3i34"))) {
				attr(i, "class", i_class_value);
			}

			if (dirty & /*labels*/ 2 && t1_value !== (t1_value = /*labels*/ ctx[1].text + "")) set_data(t1, t1_value);

			if (dirty & /*self*/ 1 && button_class_value !== (button_class_value = "pnotify-action-button pnotify-reference-button " + /*self*/ ctx[0].getStyle("btn") + " " + /*self*/ ctx[0].getStyle("btn-secondary") + " svelte-1tn3i34")) {
				attr(button, "class", button_class_value);
			}

			if (dirty & /*mouseIsIn*/ 4 && button_disabled_value !== (button_disabled_value = !/*mouseIsIn*/ ctx[2])) {
				button.disabled = button_disabled_value;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			if (detaching) detach(t2);
			if (detaching) detach(div);
			dispose();
		}
	};
}

const position = "AppendContent";

const defaults = {
	// If you are displaying any text, you should use a labels options to
	// support internationalization.
	labels: { text: "Spin Around" }
};

function instance($$self, $$props, $$invalidate) {
	let { self = null } = $$props;
	let { labels = defaults.labels } = $$props;

	// Here you can define variables not meant to be exported as options.
	let mouseIsIn = false;

	let removeMouseEnter = self.on("mouseenter", () => $$invalidate(2, mouseIsIn = true));
	let removeMouseLeave = self.on("mouseleave", () => $$invalidate(2, mouseIsIn = false));

	onDestroy(() => {
		// Remember to clean up.
		removeMouseEnter && removeMouseEnter();

		removeMouseLeave && removeMouseLeave();
	});

	function doSomething() {
		// Spin the notice around.
		let curAngle = 0;

		const timer = setInterval(
			() => {
				curAngle += 10;

				if (curAngle === 360) {
					curAngle = 0;
					clearInterval(timer);
				}

				$$invalidate(0, self.refs.elem.style.transform = "rotate(" + curAngle + "deg)", self);
			},
			20
		);
	}

	$$self.$set = $$props => {
		if ("self" in $$props) $$invalidate(0, self = $$props.self);
		if ("labels" in $$props) $$invalidate(1, labels = $$props.labels);
	};

	return [self, labels, mouseIsIn, doSomething];
}

class PNotifyReference extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { self: 0, labels: 1 });
	}
}

export default PNotifyReference;
export { position, defaults };
//# sourceMappingURL=PNotifyReference.js.map