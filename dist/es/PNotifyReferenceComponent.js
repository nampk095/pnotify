/* src/PNotifyReferenceComponent.html generated by Svelte v3.18.1 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	empty,
	init as init_1,
	insert,
	listen,
	noop,
	null_to_empty,
	safe_not_equal,
	set_data,
	space,
	text
} from "svelte/internal";

import { icons } from "./PNotifyCore";
import { onMount, createEventDispatcher } from "svelte";

function create_if_block(ctx) {
	let button;
	let i;
	let i_class_value;
	let t0;
	let t1_value = /*labels*/ ctx[2].text + "";
	let t1;
	let button_class_value;
	let button_disabled_value;
	let t2;
	let div;
	let dispose;

	return {
		c() {
			button = element("button");
			i = element("i");
			t0 = text("Â ");
			t1 = text(t1_value);
			t2 = space();
			div = element("div");
			attr(i, "class", i_class_value = "" + (null_to_empty(/*_notice*/ ctx[0].getIcon("refresh")) + " svelte-9v3agu"));
			attr(button, "class", button_class_value = "ui-pnotify-action-button ui-pnotify-reference-button " + /*_notice*/ ctx[0].getStyle("btn") + " " + /*_notice*/ ctx[0].getStyle("btn-secondary") + " svelte-9v3agu");
			attr(button, "type", "button");
			button.disabled = button_disabled_value = !/*mouseIsIn*/ ctx[3];
			attr(div, "class", "ui-pnotify-reference-clearing svelte-9v3agu");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, i);
			append(button, t0);
			append(button, t1);
			insert(target, t2, anchor);
			insert(target, div, anchor);
			dispose = listen(button, "click", /*doSomething*/ ctx[4]);
		},
		p(ctx, dirty) {
			if (dirty & /*_notice*/ 1 && i_class_value !== (i_class_value = "" + (null_to_empty(/*_notice*/ ctx[0].getIcon("refresh")) + " svelte-9v3agu"))) {
				attr(i, "class", i_class_value);
			}

			if (dirty & /*labels*/ 4 && t1_value !== (t1_value = /*labels*/ ctx[2].text + "")) set_data(t1, t1_value);

			if (dirty & /*_notice*/ 1 && button_class_value !== (button_class_value = "ui-pnotify-action-button ui-pnotify-reference-button " + /*_notice*/ ctx[0].getStyle("btn") + " " + /*_notice*/ ctx[0].getStyle("btn-secondary") + " svelte-9v3agu")) {
				attr(button, "class", button_class_value);
			}

			if (dirty & /*mouseIsIn*/ 8 && button_disabled_value !== (button_disabled_value = !/*mouseIsIn*/ ctx[3])) {
				button.disabled = button_disabled_value;
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			if (detaching) detach(t2);
			if (detaching) detach(div);
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*putThing*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*putThing*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

const key = "Reference";

const defaults = {
	// Provide a thing for stuff. Turned off by default.
	putThing: false,
	// If you are displaying any text, you should use a labels options to
	// support internationalization.
	labels: { text: "Spin Around" }
};

// This is where you would add any styling or icons classes you are using in your code.
Object.assign(icons.bootstrap3, { refresh: "glyphicon glyphicon-refresh" });

Object.assign(icons.fontawesome4, { refresh: "fa fa-refresh" });
Object.assign(icons.fontawesome5, { refresh: "fas fa-sync" });

function beforeOpen() {
	
} // Called before the notice is opened.

function afterOpen() {
	
} // Called after the notice is opened.

function beforeClose() {
	
} // Called before the notice is closed.

function afterClose() {
	
} // Called after the notice is closed.

function beforeDestroy() {
	
} // Called before the notice is destroyed.

function afterDestroy() {
	
} // Called after the notice is destroyed.

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { _notice = null } = $$props;
	let { putThing = defaults.putThing } = $$props;
	let { labels = defaults.labels } = $$props;

	// Here you can define variables not meant to be exported as options.
	let mouseIsIn = false;

	// This is the second way to init a module. Because we put markup in the
	// template, we have to fire this event to tell PNotifyCore that we are ready
	// to be initialized.
	onMount(() => {
		dispatch("init", {
			// This is optional, and will be called after the DOM is ready and options
			// have been set.
			init,
			// Include these if you need them to run.
			beforeOpen,
			afterOpen,
			beforeClose,
			afterClose,
			beforeDestroy,
			afterDestroy
		});
	});

	function init() {
		_notice.on("mouseenter", () => $$invalidate(3, mouseIsIn = true));
		_notice.on("mouseleave", () => $$invalidate(3, mouseIsIn = false));
	}

	function doSomething() {
		// Spin the notice around.
		let curAngle = 0;

		const timer = setInterval(
			() => {
				curAngle += 10;

				if (curAngle === 360) {
					curAngle = 0;
					clearInterval(timer);
				}

				$$invalidate(0, _notice.refs.elem.style.transform = "rotate(" + curAngle + "deg)", _notice);
			},
			20
		);
	}

	$$self.$set = $$props => {
		if ("_notice" in $$props) $$invalidate(0, _notice = $$props._notice);
		if ("putThing" in $$props) $$invalidate(1, putThing = $$props.putThing);
		if ("labels" in $$props) $$invalidate(2, labels = $$props.labels);
	};

	return [_notice, putThing, labels, mouseIsIn, doSomething, init];
}

class PNotifyReferenceComponent extends SvelteComponent {
	constructor(options) {
		super();

		init_1(this, options, instance, create_fragment, safe_not_equal, {
			_notice: 0,
			putThing: 1,
			labels: 2,
			init: 5
		});
	}

	get init() {
		return this.$$.ctx[5];
	}
}

export default PNotifyReferenceComponent;
export { key, defaults };
//# sourceMappingURL=PNotifyReferenceComponent.js.map