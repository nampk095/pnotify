/* src/PNotifyMobileComponent.html generated by Svelte v3.18.1 */
import {
	SvelteComponent,
	globals,
	init as init_1,
	listen,
	noop,
	safe_not_equal
} from "svelte/internal";

const { window: window_1 } = globals;
import PNotify from "./PNotifyCore";

function create_fragment(ctx) {
	let dispose;

	return {
		c: noop,
		m(target, anchor) {
			dispose = listen(window_1, "resize", /*windowResize*/ ctx[0]);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			dispose();
		}
	};
}

const key = "Mobile";

const defaults = {
	// Let the user swipe the notice away.
	swipeDismiss: true,
	// Styles the notice to look good on mobile.
	styling: true
};

function instance($$self, $$props, $$invalidate) {
	let { _notice = null } = $$props;
	let { swipeDismiss = defaults.swipeDismiss } = $$props;
	let { styling = defaults.styling } = $$props;
	let windowInnerWidth = window.innerWidth;

	function windowResize() {
		$$invalidate(6, windowInnerWidth = window.innerWidth);
	}

	function init() {
		let origXY = null;
		let diffXY = null;
		let noticeWidthHeight = null;
		let noticeOpacity = null;
		let csspos = "left";
		let direction = "X";
		let span = "Width";

		_notice.on("touchstart", e => {
			if (!swipeDismiss) {
				return;
			}

			const stack = _notice.stack;

			if (stack) {
				switch (stack.dir1) {
					case "up":
					case "down":
						csspos = "left";
						direction = "X";
						span = "Width";
						break;
					case "left":
					case "right":
						csspos = "top";
						direction = "Y";
						span = "Height";
						break;
				}
			}

			origXY = e.touches[0]["screen" + direction];
			noticeWidthHeight = _notice.refs.elem["scroll" + span];
			noticeOpacity = window.getComputedStyle(_notice.refs.elem)["opacity"];
			$$invalidate(1, _notice.refs.container.style[csspos] = 0, _notice);
		});

		_notice.on("touchmove", e => {
			if (!origXY || !swipeDismiss) {
				return;
			}

			const curXY = e.touches[0]["screen" + direction];
			diffXY = curXY - origXY;
			const opacity = (1 - Math.abs(diffXY) / noticeWidthHeight) * noticeOpacity;
			$$invalidate(1, _notice.refs.elem.style.opacity = opacity, _notice);
			$$invalidate(1, _notice.refs.container.style[csspos] = diffXY + "px", _notice);
		});

		_notice.on("touchend", () => {
			if (!origXY || !swipeDismiss) {
				return;
			}

			_notice.refs.container.classList.add("ui-pnotify-mobile-animate-left");

			if (Math.abs(diffXY) > 40) {
				const goLeft = diffXY < 0
				? noticeWidthHeight * -2
				: noticeWidthHeight * 2;

				$$invalidate(1, _notice.refs.elem.style.opacity = 0, _notice);
				$$invalidate(1, _notice.refs.container.style[csspos] = goLeft + "px", _notice);
				_notice.close();
			} else {
				_notice.refs.elem.style.removeProperty("opacity");
				_notice.refs.container.style.removeProperty(csspos);
			}

			origXY = null;
			diffXY = null;
			noticeWidthHeight = null;
			noticeOpacity = null;
		});

		_notice.on("touchcancel", () => {
			if (!origXY || !swipeDismiss) {
				return;
			}

			_notice.refs.elem.style.removeProperty("opacity");
			_notice.refs.container.style.removeProperty(csspos);
			origXY = null;
			diffXY = null;
			noticeWidthHeight = null;
			noticeOpacity = null;
		});
	}

	function afterClose() {
		// Remove any styling we added to close it.
		if (!swipeDismiss) {
			return;
		}

		_notice.refs.elem.style.removeProperty("opacity");
		_notice.refs.container.style.removeProperty("left");
		_notice.refs.container.style.removeProperty("top");
	}

	$$self.$set = $$props => {
		if ("_notice" in $$props) $$invalidate(1, _notice = $$props._notice);
		if ("swipeDismiss" in $$props) $$invalidate(2, swipeDismiss = $$props.swipeDismiss);
		if ("styling" in $$props) $$invalidate(3, styling = $$props.styling);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*_notice, styling, windowInnerWidth*/ 74) {
			$: {
				const stack = _notice.stack;

				if (styling && !_notice.hasModuleClass("elem", "ui-pnotify-mobile-able")) {
					if (stack) {
						if (windowInnerWidth <= 480) {
							if (!stack.mobileOrigSpacing1) {
								stack.mobileOrigSpacing1 = stack.spacing1;
							}

							stack.spacing1 = 0;

							if (!stack.mobileOrigFirstpos1) {
								stack.mobileOrigFirstpos1 = stack.firstpos1;
							}

							stack.firstpos1 = 0;

							if (!stack.mobileOrigSpacing2) {
								stack.mobileOrigSpacing2 = stack.spacing2;
							}

							stack.spacing2 = 0;

							if (!stack.mobileOrigFirstpos2) {
								stack.mobileOrigFirstpos2 = stack.firstpos2;
							}

							stack.firstpos2 = 0;
						} else {
							if (stack.mobileOrigSpacing1) {
								stack.spacing1 = stack.mobileOrigSpacing1;
								delete stack.mobileOrigSpacing1;
							}

							if (stack.mobileOrigFirstpos1) {
								stack.firstpos1 = stack.mobileOrigFirstpos1;
								delete stack.mobileOrigFirstpos1;
							}

							if (stack.mobileOrigSpacing2) {
								stack.spacing2 = stack.mobileOrigSpacing2;
								delete stack.mobileOrigSpacing2;
							}

							if (stack.mobileOrigFirstpos2) {
								stack.firstpos2 = stack.mobileOrigFirstpos2;
								delete stack.mobileOrigFirstpos2;
							}
						}

						_notice.removeModuleClass("elem", "ui-pnotify-mobile-top", "ui-pnotify-mobile-bottom", "ui-pnotify-mobile-right", "ui-pnotify-mobile-left");

						switch (stack.dir1) {
							case "down":
								_notice.addModuleClass("elem", "ui-pnotify-mobile-top");
								break;
							case "up":
								_notice.addModuleClass("elem", "ui-pnotify-mobile-bottom");
								break;
							case "left":
								_notice.addModuleClass("elem", "ui-pnotify-mobile-right");
								break;
							case "right":
								_notice.addModuleClass("elem", "ui-pnotify-mobile-left");
								break;
						}
					}

					_notice.addModuleClass("elem", "ui-pnotify-mobile-able");
				} else if (!styling && _notice.hasModuleClass("elem", "ui-pnotify-mobile-able")) {
					_notice.removeModuleClass("elem", "ui-pnotify-mobile-able", "ui-pnotify-mobile-top", "ui-pnotify-mobile-bottom", "ui-pnotify-mobile-right", "ui-pnotify-mobile-left");

					if (stack) {
						if (stack.mobileOrigSpacing1) {
							stack.spacing1 = stack.mobileOrigSpacing1;
							delete stack.mobileOrigSpacing1;
						}

						if (stack.mobileOrigFirstpos1) {
							stack.firstpos1 = stack.mobileOrigFirstpos1;
							delete stack.mobileOrigFirstpos1;
						}

						if (stack.mobileOrigSpacing2) {
							stack.spacing2 = stack.mobileOrigSpacing2;
							delete stack.mobileOrigSpacing2;
						}

						if (stack.mobileOrigFirstpos2) {
							stack.firstpos2 = stack.mobileOrigFirstpos2;
							delete stack.mobileOrigFirstpos2;
						}
					}
				}
			}
		}
	};

	return [windowResize, _notice, swipeDismiss, styling, init, afterClose];
}

class PNotifyMobileComponent extends SvelteComponent {
	constructor(options) {
		super();

		init_1(this, options, instance, create_fragment, safe_not_equal, {
			_notice: 1,
			swipeDismiss: 2,
			styling: 3,
			init: 4,
			afterClose: 5
		});
	}

	get init() {
		return this.$$.ctx[4];
	}

	get afterClose() {
		return this.$$.ctx[5];
	}
}

export default PNotifyMobileComponent;
export { key, defaults };
//# sourceMappingURL=PNotifyMobileComponent.js.map